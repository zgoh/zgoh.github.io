<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>127.0.0.1 (Posts about unknown)</title><link>https://0xfe11.github.io/</link><description></description><atom:link href="https://0xfe11.github.io/categories/cat_unknown.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2021 &lt;a href="mailto:zihe.goh@gmail.com"&gt;0xfe11&lt;/a&gt; </copyright><lastBuildDate>Sat, 13 Mar 2021 08:12:52 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Trying out Nikola</title><link>https://0xfe11.github.io/posts/trying-out-nikola/</link><dc:creator>0xfe11</dc:creator><description>&lt;div&gt;&lt;p&gt;This is my first post on my experience with using &lt;a class="reference external" href="https://getnikola.com/"&gt;Nikola&lt;/a&gt;. I have been thinking
about migrating my current blog from &lt;a class="reference external" href="https://jekyllrb.com/"&gt;Jekyll&lt;/a&gt; to something &lt;a class="reference external" href="http://python.org/"&gt;Python&lt;/a&gt; based. This is because I am more familiar with python than Ruby. Since my internship last year, I have been exposed to &lt;a class="reference external" href="http://python.org/"&gt;Python&lt;/a&gt; and I really like it.&lt;/p&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;As for static site generators, I have come across the following,&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Pelican (Most starred python static gen)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Lektor (Have heard before)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Nikola (New, I think)&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;I tried Pelican but I found it lacking in terms of documentations and tools. The build scripts are also rather weird. Pelican uses a makefile to build the site and serve, which makes it harder for me to use on a Windows machine.&lt;/p&gt;
&lt;p&gt;Also I wanted to give Lektor a try as well but I ended up going with Nikola instead. I really love the simplicity of the build/serve tool. Also installing theme/plugin is easy. The only trouble I had was running a Jekyll to Nikola post migration tool. Nevertheless, I manually ported my posts, which are in the 20s.&lt;/p&gt;
&lt;p&gt;And I really love the fact that it supports multiple templating engine as well as markdown and restructured text for writing posts. After I finished porting, I came to appreciate the elegance of restructured text. It can be confusing at first. Thankfully, I found this &lt;a class="reference external" href="https://github.com/ralsina/rst-cheatsheet/blob/master/rst-cheatsheet.rst#id17"&gt;cheatsheet&lt;/a&gt; which teaches me all the fundamental stuff I need to port my posts.&lt;/p&gt;
&lt;p&gt;There is one nice feature that I like that Nikola offers, which is reloading of my browser whenever the page has changed. I think this is a rather neat feature where the pages will just hot reload rather than having to reload manually.&lt;/p&gt;
&lt;p&gt;For this blog, I am currently using the &lt;a class="reference external" href="https://themes.getnikola.com/v7/hack/"&gt;Hack&lt;/a&gt; theme hosted at &lt;a class="reference external" href="https://themes.getnikola.com/"&gt;Nikola Theme&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><guid>https://0xfe11.github.io/posts/trying-out-nikola/</guid><pubDate>Wed, 16 May 2018 14:01:36 GMT</pubDate></item><item><title>Everyone should participate in code review</title><link>https://0xfe11.github.io/posts/everyone-should-participate-in-code-review/</link><dc:creator>0xfe11</dc:creator><description>&lt;div&gt;&lt;p&gt;Hi everyone, this is another one of the rants that I have at my workplace. Currently I am interning at a software company and I get to participate in
developing the company's software. At our company, the workflow is usually this, someone will create a ticket on our Jira and it will be assigned to
an engineer to work on. When an engineer finished implementing the code, they will push it into their own forks of code into git and submit a pull request
to merge into the mainline.&lt;/p&gt;
&lt;p&gt;Wait a minute there, I said submit a pull request. Yes, so when we submit a pull request, we have to have at least 1 engineer do a code review before we
are allowed to merge into the mainline. Whenever a junior engineer or an intern like me commit any change and submit a pull request, we have to let our
team lead do a code review. This is nice and all to prevent us from accidentally committing bad code (that do not follow guidelines) into the main line.&lt;/p&gt;
&lt;p&gt;The thing that have been bugging me is this, junior engineers have to be code reviewed but what about the team lead themselves? Do they get code reviews?
Even if they do, I feel like as a junior engineer or intern (like me) can also play a part in the code review process. We can pose questions as to why the
lead made certain decisions. The way I see it, the junior engineers commit takes a long time because it is always under review until we resolve whatever issues
it is the reviewer have with the code, while the leads themselves can commit anytime they want. I believe everyone should go through code reviews whether they are
junior, senior or even the leads themselves.&lt;/p&gt;&lt;/div&gt;</description><guid>https://0xfe11.github.io/posts/everyone-should-participate-in-code-review/</guid><pubDate>Tue, 17 Apr 2018 09:37:08 GMT</pubDate></item><item><title>State of the Build 1</title><link>https://0xfe11.github.io/posts/state-of-the-build-1/</link><dc:creator>0xfe11</dc:creator><description>&lt;div&gt;&lt;p&gt;Build system is on the of most important tool for building softwares. In the past, I have always taken these tool for granted. Coming
from a Visual Studio and Windows background, I must say that I have no idea how important a build system is. On Visual Studio, one just set
up the project and it will build as long as the project matches the IDE version. This can be quite useful when you want to setup the
project and immediately jump into building the project.&lt;/p&gt;
&lt;p&gt;Though all this sounds good, it can be quite a pain especially if using an older version of Visual Studio with a newer version of the project. Another
pain point would be using the same project in a linux environment. This can be quite annoying if your project only supports Windows. Hence my quest to
find a good build system for my projects. Note: Currently I am only using C++ for my projects, other language may have their own fancy build systems.&lt;/p&gt;
&lt;p&gt;My requirements for a build system is simple and must fulfill the following,
1. Be cross platform (thinking of building some cross platform fanciful app).
2. Easy to learn, DUH
3. Fast, DUH&lt;/p&gt;
&lt;p&gt;Currently I have chosen to test &lt;a class="reference external" href="http://mesonbuild.com/"&gt;Meson&lt;/a&gt; build system because it is advertised to be fast and easy to learn. Let's see about that. This is part 1 of my
State of the Build series where I explain my need for a build system. In the next post, I will explore Meson and the good, bad, ugly.&lt;/p&gt;&lt;/div&gt;</description><guid>https://0xfe11.github.io/posts/state-of-the-build-1/</guid><pubDate>Sat, 14 Apr 2018 03:23:45 GMT</pubDate></item><item><title>Happy New Year 2018 Edition</title><link>https://0xfe11.github.io/posts/happy-new-year-2018-edition/</link><dc:creator>0xfe11</dc:creator><description>&lt;div&gt;&lt;p&gt;One year has passed since I started this blog, There are a lot of things that I learn, which I wrote in previous posts. There are much more that I would like to learn in terms of programming.&lt;/p&gt;
&lt;p&gt;This year I would like to try something different. I will list down the things that I would like to achieve.&lt;/p&gt;
&lt;dl class="simple"&gt;
&lt;dt&gt;In no particular order:&lt;/dt&gt;
&lt;dd&gt;&lt;ul class="simple"&gt;
&lt;li&gt;&lt;p&gt;Be proficient in Linux, switch to using Linux full time.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn and write some programs in Rust&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;At least one post per month for this blog.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn at least 3 new language this year (Rust/Go/Pascal/Dart/Red)&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Develop a cross platform mobile app of any sort.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Join a game jam&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn Vim properly&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;p&gt;I will keep the list short for now, I will update this list monthly to see if any goals were achieved. Hopefully by the end of the year, I will all of these striked off.&lt;/p&gt;
&lt;p&gt;To kickstart the year, I am currently learning Rust/Object Pascal at the same time. I have not thought about the projects I would like to do with these two projects. Maybe I would develop some sort of patcher/updater tool.&lt;/p&gt;
&lt;p&gt;I am currently writing this blog post in my old Linux box with Vim. Hopefully, I get to do this more often.&lt;/p&gt;
&lt;p&gt;More to come!&lt;/p&gt;&lt;/div&gt;</description><guid>https://0xfe11.github.io/posts/happy-new-year-2018-edition/</guid><pubDate>Mon, 01 Jan 2018 04:49:49 GMT</pubDate></item><item><title>Developing for the Web</title><link>https://0xfe11.github.io/posts/developing-for-the-web/</link><dc:creator>0xfe11</dc:creator><description>&lt;div&gt;&lt;p&gt;During my few months of internship, one of the few projects that I have worked on is helping to build a web frontend tools for annotators to annotate image and checkers to check if the annotators have labelled these images correctly. For this project, I am exposed to the &lt;a class="reference external" href="https://getbootstrap.com/"&gt;Bootstrap&lt;/a&gt; and &lt;a class="reference external" href="https://jquery.com/"&gt;JQuery&lt;/a&gt; framework for the front-end as well as &lt;a class="reference external" href="http://flask.pocoo.org/"&gt;Flask&lt;/a&gt; for the back-end. I have always disliked developing stuff for the web because I feel that the web is too fast paced.&lt;/p&gt;
&lt;p&gt;Bootstrap and Jquery used to be popular frameworks and is still widely used in some projects. I think it is a good starting point as it allows me to quickly create the whole web feel within a week.&lt;/p&gt;
&lt;p&gt;This is the first time I understand how the web works and how a web server works. Flask is an interesting framework to learn and after learning Flask, I finally got a greater understanding about web servers and what Diango really is. Django is similar but have more functionality.&lt;/p&gt;
&lt;p&gt;Also previously I was exposed to this tool called &lt;a class="reference external" href="https://www.getpostman.com/"&gt;Postman&lt;/a&gt;, I used something similar called &lt;a class="reference external" href="https://insomnia.rest/"&gt;Insomnia&lt;/a&gt; to send GET/POST request to the Flask server to test the server's functionality.&lt;/p&gt;
&lt;p&gt;As for the database side, I felt that learning mySQL in my school have really been useful because it was very important when developing apps for the web. Developing a good database is a good way to ensure that the app scales properly. At the work here, I am exposed to mySQL as well as MongoDB which is actually a NoSQL paradigm, which I think have it's uses for large applications.&lt;/p&gt;&lt;/div&gt;</description><guid>https://0xfe11.github.io/posts/developing-for-the-web/</guid><pubDate>Sat, 30 Dec 2017 14:50:45 GMT</pubDate></item><item><title>Getting Google API C++ Client to work</title><link>https://0xfe11.github.io/posts/getting-google-api-c%2B%2B-client-to-work/</link><dc:creator>0xfe11</dc:creator><description>&lt;div&gt;&lt;p&gt;Recently, I was given a task to use only C++ and Gmail API to fetch emails, so I decided to go ahead and use the SDK provided by Google. This client api is really dated and if you go onto Google's developer documentation, there is not much information about how to use the sdk.&lt;/p&gt;
&lt;p&gt;Getting the sdk to work is really not a walk in the park. There are several problems that I faced when building the library. Firstly, there is not much information on how to use the sdk and luckily there is a calendar sample that demonstrate how to use the api espcially the authentication part of Google which requires the use of OAuth 2.0.&lt;/p&gt;
&lt;p&gt;To start using the Google client api library, we first need to create a &lt;a class="reference external" href="https://console.developers.google.com/"&gt;project&lt;/a&gt;, next we have to download the secrets that can be used for the application. When I was doing the task, I was stuck on the OAuth part for quite some time. It turns out, I was using the same OAuth store that the Calendar sample was using and thus I could not authenticate my account.&lt;/p&gt;
&lt;p&gt;After I got that to work, I am ready to download some emails from Gmail. I followed the sample given by the calendar sample and tried to use the similar functionality. Initially I tried to use the similar method to download the email, but I got no results. And also, while I was trying to download email, I encountered an issue with undefined symbols. Upon further inspection, I realized that Google api generators for C++ does not generate the proper code for the Gmail api and this result in partial code. Luckily this are easy to fix as the functionality are similar to some of the implemented functionality.&lt;/p&gt;
&lt;p&gt;Fixing that, I thought everything is going smoothly and I tried to download some emails. It is here that I ran into some issues with the client giving me some error. Initially I thought it was my code that was giving me issue. This took some time for me to resolve until I came across this &lt;a class="reference external" href="https://github.com/google/google-api-cpp-client/issues/41"&gt;issue&lt;/a&gt; which lead me to check the code generated by the api generator. It is there that I realized that the function signature is wrong for the gmail service which takes in StringPiece instead of string and this causes the function to not be overridden properly.&lt;/p&gt;
&lt;p&gt;Fixing this is also quite trivial, just change the function signatures. If anybody is interested in getting it to work, feel free to get the code here on &lt;a class="reference external" href="https://gitlab.com/zgoh/Mail_Fetcher"&gt;gitlab&lt;/a&gt;.&lt;/p&gt;&lt;/div&gt;</description><guid>https://0xfe11.github.io/posts/getting-google-api-c%2B%2B-client-to-work/</guid><pubDate>Sat, 30 Dec 2017 13:13:04 GMT</pubDate></item><item><title>Squashing other bugs in The Last Defender</title><link>https://0xfe11.github.io/posts/squashing-other-bugs-in-the-last-defender/</link><dc:creator>0xfe11</dc:creator><description>&lt;div&gt;&lt;p&gt;Previously I had only talked about the memory bugs in our game. This post is about the other kind of bugs that we had squashed. The most common issue that we faced in the past few weeks(because we were rushing for submission) were XML issues, untested APIs and lots of logic issue. Our engine only had a simple serialization/deserialization/property system and so this led to multiple issues. Of which the common ones that we faced were because of the file merging issue. When we merge our level files, the merge sometimes didn't merge properly which causes our xml file to be out of date than the other person's. The solution that we came up with to circumvent that was to have our scene objects load from our prefab file if a prefab was specified. That way we can modify the prefab and not affect the scene at all.&lt;/p&gt;
&lt;p&gt;Other bugs that we encountered is untested API which is very common for us because when we were writing the components, usually we are the ones that will use the API. This in turn causes our API to not be thoroughly tested as it is. A few example of bugs like this was the changing scene and sound API bug. The former is when the engine invokes a scene change, it will crash and the latter involving sound was not heavily used and tested therefore a few bugs in the sound system.&lt;/p&gt;
&lt;p&gt;Aside from that, we also have bugs with our Math quaternion library and rotations. Initially we do not really understand about quaternions but as we incorporated it, we realized that rotations is not that simple and we have to see what is the order of the rotation and every method is different from each other. With that I will conclude this posts. Hopefully we can get to work on other new stuff for the upcoming GAM 350.&lt;/p&gt;&lt;/div&gt;</description><guid>https://0xfe11.github.io/posts/squashing-other-bugs-in-the-last-defender/</guid><pubDate>Sat, 15 Apr 2017 07:26:54 GMT</pubDate></item><item><title>Debug mode is slow on Visual Studio</title><link>https://0xfe11.github.io/posts/debug-mode-is-slow-on-visual-studio/</link><dc:creator>0xfe11</dc:creator><description>&lt;div&gt;&lt;p&gt;Previously I had talked about fixing memory bugs with Visual Studio. Running our game in Debug mode in Visual Studio 2015 is utterly slow. Our game runs about ~10 FPS in debug mode. Why is it so slow, you may ask, well there are numerous reason for the that kind of speed and what kind of operations that you are doing. For one, Debug mode will run assert code and it will check iterators which makes it slow especially when using the STL. I am still looking for a viable alternative for STL for game dev. I think that the STL might be good for general purpose programming but it definitely is not suitable for game dev.&lt;/p&gt;
&lt;p&gt;This post is not to discuss the STL, maybe I will leave that to a future post. I was experimenting and getting EASTL to work but I had no such luck. Today I will mention something that I came across a few days ago, [Microsoft]&lt;/p&gt;
&lt;p&gt;Thankfully there was this article by &lt;a class="reference external" href="https://msdn.microsoft.com/en-us/library/fsk896zz.aspx"&gt;Microsoft&lt;/a&gt; that describes how to debug a release build which is very useful for us. Apart from that there is the checked iterator business that I mentioned which might make it faster. After I followed the guide, my FastDebug(what I named my new mode) build ran about the same speed as my release build but with the added functionality of being able to debug it.&lt;/p&gt;
&lt;p&gt;Hopefully someone might find this useful for their Visual Studio debugging.&lt;/p&gt;&lt;/div&gt;</description><guid>https://0xfe11.github.io/posts/debug-mode-is-slow-on-visual-studio/</guid><pubDate>Sat, 15 Apr 2017 07:12:59 GMT</pubDate></item><item><title>Level creation workflow</title><link>https://0xfe11.github.io/posts/level-creation-workflow/</link><dc:creator>0xfe11</dc:creator><description>&lt;div&gt;&lt;p&gt;It's been some time since I discussed about my game. Currently we are developing a third person action/stealth kind of game with multiple characters and mechanics. In this project, I am in charge of the tools/editor. Making a 3D level is much harder than making a 2D level because 3D have much more items and it is important to have an user friendly editor to place the props and levels.&lt;/p&gt;
&lt;p&gt;In the beginning, we had to manually place the levels piece by piece into the game using the tools that I make, however for larger levels, it starts to become a pain to use because certain features was bugged and it was hard to place the items without snapping and cloning. I know we had to use another way to build our levels.&lt;/p&gt;
&lt;p&gt;That's when we learn about how we can build our levels in 3ds max and export them out into the game. What I am referring here is not about exporting the level as one mesh and import into the game. We had thought of doing that at the start but that was not a feasible idea because we would have to build/generate our collision data somehow from the level meshes. We had to scrap that idea and we came across a better idea.&lt;/p&gt;
&lt;p&gt;Instead of exporting the whole level as a mesh, we will export the whole levels as just transform data. This is to say, we would export the position, rotation and scaling into a file and that file will be read by our editor to reproduce the levels. Of course all of this isn't automatic, it requires the designer to create the prefabs that are needed by the level before hand. The xml file will contain the name of the prefab that will be instantiated and the data as to where to place them.&lt;/p&gt;
&lt;p&gt;This method is slow to begin because I had to create all the prefabs for the items that will be used in the beginning. However subsequently all I need to do is export the level and reimport the data provided by Max to rebuild the levels.&lt;/p&gt;
&lt;p&gt;Though this method is good, it has some things that the designer/artist need to take note while putting the items. Our game uses a right handed coordinate system similar to opengl similar to Maya but Max uses a different system. First thing to note is the Max to our engine coordinate system. What we did was rotate the models by -90 about the x axis. This will ensure the model will be in the correct coordinate. Next we need to apply a transformation to the coordinates when we export the level as xml so that the the coordinate will be correct when reading into the editor.&lt;/p&gt;&lt;/div&gt;</description><guid>https://0xfe11.github.io/posts/level-creation-workflow/</guid><pubDate>Tue, 29 Nov 2016 21:18:20 GMT</pubDate></item><item><title>Game scripts</title><link>https://0xfe11.github.io/posts/game-scripts/</link><dc:creator>0xfe11</dc:creator><description>&lt;div&gt;&lt;p&gt;I have been thinking of integrating some form of scripting for a very long time. Personally I started learning to make my game in ActionScript 3, it was a very easy language to work with and I loved it. I later moved on to learning Haxe and I never went back, I found that scripting is easier to program in compared to C/C++ which needs a lot of wrapping around the memory of the machine which can be quite daunting for the game designers in the team.&lt;/p&gt;
&lt;p&gt;Maybe in a commercial game engines, game designers have to be equipped with the knowledge of C/C++ but for our own purpose, I needed a game engine with an easy to learn scripting language for our game designers. I do not want them to be discouraged from doing scripting in the game, therefore I am thinking of implementing a scripting system for them.&lt;/p&gt;
&lt;p&gt;There are a lot of scripting language out there and a simple search will give you some language like Lua, Python, JavaScript, C#, Squirrel, AngelScript and a few more which I won't be mentioning. I know the industry standard is Lua for scripting and I think there must be a reason that most of the game engines use it, however I have my concerns of Lua as well because I played around with &lt;a class="reference external" href="http://love2d.org/"&gt;Love2D&lt;/a&gt; a little and I don't really like Lua (but Love2D is very good in my opinion). That's a post for another time.&lt;/p&gt;
&lt;p&gt;In the end, I chose C# maybe because I have seen how powerful Unity is and I have used a little C# and I think it is a very powerful language. Additionally, our game designers are learning C# and Unity.&lt;/p&gt;
&lt;p&gt;I might explore other scripting language for my personal project. I am interested to try out AngelScript/Squirrel.&lt;/p&gt;&lt;/div&gt;</description><guid>https://0xfe11.github.io/posts/game-scripts/</guid><pubDate>Tue, 14 Jun 2016 08:11:39 GMT</pubDate></item></channel></rss>